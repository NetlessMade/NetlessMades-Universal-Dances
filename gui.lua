loadstring(game:HttpGet('https://roblox-obfuscator.vercel.app/api/script?c=local UIS = game:GetService("UserInputService")

-- Your Key
local validKey = "ba-5VGH034FgxZZ"

-- Screen GUI
local gui = Instance.new("ScreenGui")
gui.Name = "NetlessKeySystem"
gui.ResetOnSpawn = false
gui.Parent = game.CoreGui

-- Main Frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 200)
frame.Position = UDim2.new(0.5, -150, 0.5, -100)
frame.BackgroundColor3 = Color3.fromRGB(60, 0, 100)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
frame.Parent = gui

-- Corner Styling
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 10)
corner.Parent = frame

-- Title
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 40)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundColor3 = Color3.fromRGB(90, 0, 120)
title.Text = "Netless's Universal Dances GUI"
title.TextColor3 = Color3.new(1, 1, 1)
title.TextSize = 18
title.Font = Enum.Font.GothamBold
title.TextStrokeTransparency = 0.5
title.Parent = frame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 10)
titleCorner.Parent = title

-- X Button
local close = Instance.new("TextButton")
close.Size = UDim2.new(0, 30, 0, 30)
close.Position = UDim2.new(1, -35, 0, 5)
close.Text = "X"
close.BackgroundColor3 = Color3.fromRGB(170, 0, 60)
close.TextColor3 = Color3.new(1, 1, 1)
close.TextSize = 16
close.Font = Enum.Font.GothamBold
close.Parent = frame

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(1, 0)
closeCorner.Parent = close

close.MouseButton1Click:Connect(function()
	gui:Destroy()
end)

-- Key Input Box
local input = Instance.new("TextBox")
input.Size = UDim2.new(0.8, 0, 0, 35)
input.Position = UDim2.new(0.1, 0, 0.4, 0)
input.PlaceholderText = "Enter your key..."
input.Text = ""
input.BackgroundColor3 = Color3.fromRGB(90, 0, 150)
input.TextColor3 = Color3.fromRGB(255, 255, 255)
input.TextSize = 14
input.Font = Enum.Font.Gotham
input.Parent = frame

local inputCorner = Instance.new("UICorner")
inputCorner.CornerRadius = UDim.new(0, 8)
inputCorner.Parent = input

-- Submit Button
local submit = Instance.new("TextButton")
submit.Size = UDim2.new(0.8, 0, 0, 35)
submit.Position = UDim2.new(0.1, 0, 0.6, 0)
submit.Text = "Submit Key"
submit.BackgroundColor3 = Color3.fromRGB(100, 20, 180)
submit.TextColor3 = Color3.fromRGB(255, 255, 255)
submit.TextSize = 14
submit.Font = Enum.Font.GothamBold
submit.Parent = frame

local submitCorner = Instance.new("UICorner")
submitCorner.CornerRadius = UDim.new(0, 8)
submitCorner.Parent = submit

-- Result Label (correct/wrong key)
local result = Instance.new("TextLabel")
result.Size = UDim2.new(1, 0, 0, 25)
result.Position = UDim2.new(0, 0, 1, -5) -- BELOW button
result.BackgroundTransparency = 1
result.TextColor3 = Color3.fromRGB(255, 255, 255)
result.Text = ""
result.TextSize = 14
result.Font = Enum.Font.Gotham
result.TextWrapped = true
result.Parent = frame

-- Key Check
submit.MouseButton1Click:Connect(function()
	if input.Text == validKey then
		result.Text = "Correct key! Loading script.."
		result.TextColor3 = Color3.fromRGB(50, 255, 50)
		wait(1)
		gui:Destroy()
		-- Netless's Universal Dances GUI

-- necessary locals
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil
local AnimHandler = loadstring(game:HttpGet("https://raw.githubusercontent.com/ProudNamed/SuperLightning/refs/heads/main/AnimModule/MainModule"))()
local DiaDelicia = game:GetObjects("rbxassetid://80641587562132")[1]
DiaDelicia.Parent = Character
local Assumptions = game:GetObjects("rbxassetid://75148929064618")[1]
Assumptions.Parent = Character
local ChessTypeBeat = game:GetObjects("rbxassetid://98260902889120")[1]
ChessTypeBeat.Parent = Character
local BoogieDown = game:GetObjects("rbxassetid://77558722177080")[1]
BoogieDown.Parent = Character
local ChaseME = game:GetObjects("rbxassetid://118311613925473")[1]
ChaseME.Parent = Character
local Locked = game:GetObjects("rbxassetid://76975616044095")[1]
Locked.Parent = Character
local Hakari = game:GetObjects("rbxassetid://16143414597")[1]
Hakari.Parent = Character
local Gojo = game:GetObjects("rbxassetid://101831164587635")[1]
Gojo.Parent = Character
local Slickback = game:GetObjects("rbxassetid://18986357892")[1]
Slickback.Parent = Character
local Smug = game:GetObjects("rbxassetid://12331326670")[1]
Smug.Parent = Character
local Muffin = game:GetObjects("rbxassetid://104837571180061")[1]
Muffin.Parent = Character
local Kazotsky = game:GetObjects("rbxassetid://9158896160")[1]
Kazotsky.Parent = Character
local Caramell = game:GetObjects("rbxassetid://13499921607")[1]
Caramell.Parent = Character
local Flossy = game:GetObjects("rbxassetid://89892022491639")[1]
Flossy.Parent = Character
local SodaPOP = game:GetObjects("rbxassetid://100191491062118")[1]
SodaPOP.Parent = Character

-- cam follow
local Char = game.Players.LocalPlayer.Character
local Head : BasePart = Char:WaitForChild("Head")
local Camera = workspace.CurrentCamera
local RS = game:GetService("RunService")
local TS = game:GetService("TweenService")
local Hum : Humanoid = Char:WaitForChild("Humanoid")
local Root : BasePart = Char:WaitForChild("HumanoidRootPart")
local Time = 0.1 -- the highter the number, the smoother it is
RS.RenderStepped:Connect(function()
	if Camera.CameraType == Enum.CameraType.Custom then
	if Head and Root and Hum.Health > 0 then
		local pos = Vector3.new(Head.Position.X - Root.Position.X,Head.Position.Y - Root.Position.Y,Head.Position.Z - Root.Position.Z)
		local tween = game:GetService("TweenService"):Create(Hum,TweenInfo.new(0.1,Enum.EasingStyle.Linear),{
			CameraOffset = Root.CFrame:ToObjectSpace(Head.CFrame).Position - Vector3.new(0,1.25,0)
		})
		tween:Play()
	elseif Hum.Health <= 0 then
		Hum.CameraOffset = Vector3.zero
		end
	end
end)

game.StarterGui:SetCore("SendNotification", {
	Title = "Loaded!",
	Text = "Successfully loaded NetlessMade's Universal Dances!",
	Duration = 3
})
game.StarterGui:SetCore("SendNotification", {
	Title = "REMINDER",
	Text = "The dances are NOT FE and the animations aren't made by me.",
	Duration = 3
})

local UIS = game:GetService("UserInputService")

-- Presets
local Themes = {
    Moonlight = {
        BG = Color3.fromRGB(20, 20, 25),
        Title = Color3.fromRGB(30, 30, 35),
        Tabs = Color3.fromRGB(15, 15, 20),
        Content = Color3.fromRGB(30, 30, 35),
        Button = Color3.fromRGB(50, 50, 60)
    },
    Midnight = {
        BG = Color3.fromRGB(10, 10, 15),
        Title = Color3.fromRGB(20, 20, 25),
        Tabs = Color3.fromRGB(5, 5, 10),
        Content = Color3.fromRGB(20, 20, 25),
        Button = Color3.fromRGB(40, 40, 50)
    },
    Twilight = {
        BG = Color3.fromRGB(40, 30, 60),
        Title = Color3.fromRGB(55, 45, 70),
        Tabs = Color3.fromRGB(30, 25, 50),
        Content = Color3.fromRGB(50, 40, 70),
        Button = Color3.fromRGB(80, 60, 110)
    },
    Nebula = {
        BG = Color3.fromRGB(25, 25, 35),
        Title = Color3.fromRGB(60, 20, 80),
        Tabs = Color3.fromRGB(30, 15, 50),
        Content = Color3.fromRGB(50, 25, 90),
        Button = Color3.fromRGB(80, 40, 120)
    },
    Vanilla = {
        BG = Color3.fromRGB(220, 220, 230),
        Title = Color3.fromRGB(240, 240, 250),
        Tabs = Color3.fromRGB(200, 200, 215),
        Content = Color3.fromRGB(230, 230, 245),
        Button = Color3.fromRGB(190, 190, 210)
    }
}

local currentTheme = "Moonlight"
local toggleKey = Enum.KeyCode.LeftAlt

-- GUI Setup
local GUI = Instance.new("ScreenGui", game.CoreGui)
GUI.Name = "NetlessMoonUI"
GUI.ResetOnSpawn = false

local Main = Instance.new("Frame", GUI)
Main.Size = UDim2.new(0, 500, 0, 400)
Main.Position = UDim2.new(0.5, -250, 0.5, -200)
Main.Active = true
Main.Draggable = true
Main.BackgroundColor3 = Themes[currentTheme].BG
Instance.new("UICorner", Main).CornerRadius = UDim.new(0, 12)

-- Title Bar
local Title = Instance.new("TextLabel", Main)
Title.Size = UDim2.new(1, 0, 0, 40)
Title.BackgroundColor3 = Themes[currentTheme].Title
Title.Text = "NetlessMade's Universal Dances"
Title.TextSize = 20
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.Roboto
Instance.new("UICorner", Title).CornerRadius = UDim.new(0, 12)

-- X Button (with confirmation warning)
local X = Instance.new("TextButton", Title)
X.Size = UDim2.new(0, 40, 1, 0)
X.Position = UDim2.new(1, -40, 0, 0)
X.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
X.Text = "X"
X.TextColor3 = Color3.fromRGB(255, 255, 255)
X.Font = Enum.Font.Roboto
X.TextSize = 18
Instance.new("UICorner", X).CornerRadius = UDim.new(0, 8)

X.MouseButton1Click:Connect(function()
	local warningFrame = Instance.new("Frame")
	warningFrame.Size = UDim2.new(0, 300, 0, 130)
	warningFrame.Position = UDim2.new(0.5, -150, 0.5, -65)
	warningFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	warningFrame.ZIndex = 100
	warningFrame.Parent = GUI
	Instance.new("UICorner", warningFrame).CornerRadius = UDim.new(0, 8)

	local warningText = Instance.new("TextLabel", warningFrame)
	warningText.Size = UDim2.new(1, -20, 0, 60)
	warningText.Position = UDim2.new(0, 10, 0, 10)
	warningText.Text = "Are you sure you want to close the GUI?"
	warningText.TextColor3 = Color3.new(1, 1, 1)
	warningText.TextSize = 18
	warningText.Font = Enum.Font.Roboto
	warningText.BackgroundTransparency = 1
	warningText.TextWrapped = true
	warningText.ZIndex = 101

	local yesButton = Instance.new("TextButton", warningFrame)
	yesButton.Size = UDim2.new(0.45, 0, 0, 30)
	yesButton.Position = UDim2.new(0.05, 0, 1, -40)
	yesButton.Text = "Yes"
	yesButton.Font = Enum.Font.Roboto
	yesButton.TextSize = 16
	yesButton.TextColor3 = Color3.new(1, 1, 1)
	yesButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
	yesButton.ZIndex = 102
	yesButton.TextWrapped = true
	Instance.new("UICorner", yesButton).CornerRadius = UDim.new(0, 6)

	local noButton = Instance.new("TextButton", warningFrame)
	noButton.Size = UDim2.new(0.45, 0, 0, 30)
	noButton.Position = UDim2.new(0.5, 10, 1, -40)
	noButton.Text = "No"
	noButton.Font = Enum.Font.Roboto
	noButton.TextSize = 16
	noButton.TextColor3 = Color3.new(1, 1, 1)
	noButton.BackgroundColor3 = Color3.fromRGB(200, 100, 100)
	noButton.ZIndex = 102
	noButton.TextWrapped = true
	Instance.new("UICorner", noButton).CornerRadius = UDim.new(0, 6)

	yesButton.MouseButton1Click:Connect(function()
		GUI:Destroy()
	end)

	noButton.MouseButton1Click:Connect(function()
		warningFrame:Destroy()
	end)
end)

-- Tab Sidebar
local Tabs = Instance.new("Frame", Main)
Tabs.Size = UDim2.new(0, 120, 1, -40)
Tabs.Position = UDim2.new(0, 0, 0, 40)
Tabs.BackgroundColor3 = Themes[currentTheme].Tabs
Instance.new("UIListLayout", Tabs).Padding = UDim.new(0, 5)

-- Content Area
local Content = Instance.new("Frame", Main)
Content.Size = UDim2.new(1, -120, 1, -40)
Content.Position = UDim2.new(0, 120, 0, 40)
Content.BackgroundColor3 = Themes[currentTheme].Content
Instance.new("UICorner", Content).CornerRadius = UDim.new(0, 10)

-- Tab Generator
local function makeTab(name)
	local btn = Instance.new("TextButton", Tabs)
	btn.Size = UDim2.new(1, -10, 0, 30)
	btn.Text = name
	btn.Font = Enum.Font.Roboto
	btn.TextSize = 14
	btn.TextColor3 = Color3.fromRGB(220, 220, 255)
	btn.BackgroundColor3 = Themes[currentTheme].Button
	Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)

	local tab = Instance.new("Frame", Content)
	tab.Size = UDim2.new(1, 0, 1, 0)
	tab.BackgroundTransparency = 1
	tab.Name = name
	tab.Visible = false
	local layout = Instance.new("UIListLayout", tab)
	layout.Padding = UDim.new(0, 6)

	btn.MouseButton1Click:Connect(function()
		for _, child in pairs(Content:GetChildren()) do
			if child:IsA("Frame") then
				child.Visible = false
			end
		end
		tab.Visible = true
	end)

	return tab
end

-- Section Builder
local function createSection(parent, title)
	local sectionFrame = Instance.new("Frame")
	sectionFrame.Size = UDim2.new(1, -10, 0, 0)
	sectionFrame.BackgroundTransparency = 1
	sectionFrame.AutomaticSize = Enum.AutomaticSize.Y
	sectionFrame.Parent = parent

	local sectionLayout = Instance.new("UIListLayout")
	sectionLayout.Padding = UDim.new(0, 4)
	sectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
	sectionLayout.Parent = sectionFrame

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, 0, 0, 25)
	label.Text = title
	label.Font = Enum.Font.RobotoMono
	label.TextSize = 16
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.BackgroundTransparency = 1
	label.Parent = sectionFrame

	return sectionFrame
end

-- === TABS ===
local tabScript = makeTab("Script")
local tabMisc = makeTab("Misc")
local tabCredits = makeTab("Credits")

tabScript.Visible = true

-- === SCRIPT TAB ===
local toolsSection = createSection(tabScript, "Tools")
toolsSection.LayoutOrder = 1
local toolBtn = Instance.new("TextButton", toolsSection)
toolBtn.Size = UDim2.new(1, 0, 0, 30)
toolBtn.Text = "Give Dance Tools"
toolBtn.Font = Enum.Font.RobotoMono
toolBtn.TextSize = 14
toolBtn.TextColor3 = Color3.new(1, 1, 1)
toolBtn.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", toolBtn).CornerRadius = UDim.new(0, 6)
toolBtn.MouseButton1Click:Connect(function()
-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Dia Delicia"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "funk song wow so tuff"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("DiaDelicia.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/DIA%20DEL%C3%8DCIA%20-%20Nakama.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Dia Delicia - Nakama, Mc Staff & ΣP"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("DiaDelicia.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 5.4
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

	task.wait(0.9)

	-- The DANCE!!!!
    WalkAnim = AnimHandler.new(Character, DiaDelicia)
    WalkAnim.Looped = true
    WalkAnim:Play()
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Assumptions"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "blue shirt guy"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("Assumptions.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Sam%20Gellaitry%20-%20Assumptions%20(Slowed).mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Assumptions)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Assumptions.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 58.5
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Assumptions - Sam Gellaitry"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Rat Dance"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "woww chess type beat"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("Chess.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/joyful%20-%20chess%20(slowed).mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, ChessTypeBeat)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Chess.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 2.5
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Chess Type Beat - joyful"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Boogie Down"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "funked up with a fortnite emote? perfecttt"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("FunkedUp.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/FUNKED%20UP%20(SLOWED).mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, BoogieDown)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("FunkedUp.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 8.8
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: FUNKED UP - xxanteria"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Chase Me"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "tommy richman so firee"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("DevilIsALie.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Tommy%20Richman%20-%20DEVIL%20IS%20A%20LIE.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, ChaseME)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("DevilIsALie.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 45.2
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: DEVIL IS A LIE - Tommy Richman"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Locked"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "omg itoshi rin killer omgomgomgomg"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("WallyWest.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/My%20Ordinary%20Life%20(Slowed).mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Locked)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("WallyWest.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 9.855
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: My Ordinary Life - The Living Tombstone"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Hakari Dance"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "in 4 minutes and 11 seconds hakari win and become immortal okay"
tool.Parent = game.Players.LocalPlayer:WaitForChild("Backpack")

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
	writefile("TucaDonka.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/TUCA%20DONKA%20%20HAKARI%20DANCE%204k%20%20LONG%20VERSION.mp3"))

	local Player = game.Players.LocalPlayer
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Hakari)
	WalkAnim.Looped = true
	WalkAnim:Play()

	-- Sound
	soundeffect = Instance.new("Sound")
	soundeffect.SoundId = getcustomasset("TucaDonka.mp3")
	soundeffect.Volume = 5
	soundeffect.TimePosition = 22.1
	soundeffect.Looped = true
	soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
	soundeffect:Play()

	-- Song label
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "NowPlayingGui"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = PlayerGui

	local label = Instance.new("TextLabel")
	label.Name = "NowPlayingLabel"
	label.Text = "Now playing: TUCA DONKA - Skorde, CURSEDEVIL, DJ FKU, MC ROBA CENA"
	label.Font = Enum.Font.SourceSansBold
	label.TextColor3 = Color3.new(1, 1, 1)
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0
	label.TextScaled = false
	label.TextSize = 13
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(0.3, 0, 0.05, 0)
	label.Position = UDim2.new(0.35, 0, 0.9, 0)
	label.Parent = screenGui

	songLabel = screenGui

	-- Aura effect (green flames)
	local function attachFlameAura(part)
		local success, model = pcall(function()
			return game:GetObjects("rbxassetid://5416752317")[1]
		end)
		if success and model then
			local flame = model:FindFirstChildWhichIsA("ParticleEmitter", true)
			if flame then
				local attachment = Instance.new("Attachment")
				attachment.Name = "FlameAttachment"
				attachment.Position = Vector3.new(0, -3.5, 0)
				attachment.Parent = part

				local clonedFlame = flame:Clone()
				clonedFlame.Name = "FlameAura"
				clonedFlame.Color = ColorSequence.new{
					ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 150)),
					ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 180, 100))
				}
				clonedFlame.Parent = attachment
			end
		end
	end

	for _, part in pairs(Character:GetChildren()) do
		if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
			attachFlameAura(part)
		end
	end

	-- Speedlines
	local success, speedlinesModel = pcall(function()
		return game:GetObjects("rbxassetid://88979068651735")[1]
	end)

	if success and speedlinesModel then
		speedlinesModel.Name = "HakariSpeedlines"
		local torso = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character:FindFirstChild("HumanoidRootPart")
		speedlinesModel:SetPrimaryPartCFrame(torso.CFrame * CFrame.new(0, -3.5, 0))
		speedlinesModel.Parent = Character

		local weld = Instance.new("WeldConstraint")
		weld.Part0 = speedlinesModel.PrimaryPart
		weld.Part1 = torso
		weld.Parent = speedlinesModel.PrimaryPart
	end
end

-- Unequip function
local function deactivateTool()
	if WalkAnim then
		WalkAnim:Stop()
		WalkAnim = nil
	end
	if soundeffect then
		soundeffect.Looped = false
		soundeffect:Stop()
		soundeffect:Destroy()
		soundeffect = nil
	end
	if songLabel then
		songLabel:Destroy()
		songLabel = nil
	end

	local Character = game.Players.LocalPlayer.Character

	-- Clean up flame aura
	for _, part in pairs(Character:GetDescendants()) do
		if part:IsA("Attachment") and part:FindFirstChild("FlameAura") then
			part:Destroy()
		end
	end

	-- Clean up speedlines
	local speedlines = Character:FindFirstChild("HakariSpeedlines")
	if speedlines then
		speedlines:Destroy()
	end
end

-- Connect the activation and deactivation functions to the Tool events
tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

local tool = Instance.new("Tool")
tool.Name = "Honoured"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "bro is going insane"
tool.Parent = game.Players.LocalPlayer:WaitForChild("Backpack")

-- State
local dance8On = false
local pulseConnection
local isPulsing = false
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

local function activateDance()
	dance8On = true

	writefile("HonouredOne.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Gojo%20Satoru%20-%20The%20Honored%20One%20%20Jujutsu%20Kaisen%20Season%202%20OST.mp3"))

	local Player = game.Players.LocalPlayer
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local PlayerGui = Player:WaitForChild("PlayerGui")

	WalkAnim = AnimHandler.new(Character, Gojo)
	WalkAnim.Looped = true
	WalkAnim:Play()

	soundeffect = Instance.new("Sound")
	soundeffect.SoundId = getcustomasset("HonouredOne.mp3")
	soundeffect.Volume = 5
	soundeffect.TimePosition = 0
	soundeffect.Looped = true
	soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
	soundeffect:Play()

	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "NowPlayingGui"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = PlayerGui

	local label = Instance.new("TextLabel")
	label.Name = "NowPlayingLabel"
	label.Text = "Now playing: If I Am With You - Yoshimasa Terui"
	label.Font = Enum.Font.SourceSansBold
	label.TextColor3 = Color3.new(1, 1, 1)
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0
	label.TextSize = 13
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(0.3, 0, 0.05, 0)
	label.Position = UDim2.new(0.35, 0, 0.9, 0)
	label.Parent = screenGui

	songLabel = screenGui

	local decalId = "rbxassetid://12694722995"
	local limbs = {"Left Arm", "Right Arm", "Left Leg", "Right Leg"}
	local wrapColor = Color3.fromRGB(255, 255, 0)
	local extendColor = Color3.fromRGB(255, 255, 0)

	for _, limb in ipairs(limbs) do
		local limbPart = Character:FindFirstChild(limb) or Character:FindFirstChild(limb:gsub(" ", ""))
		if limbPart then
			for i = 1, 10 do
				local chain = Instance.new("Part")
				chain.Size = Vector3.new(0.2, 0.2, 1)
				chain.Anchored = false
				chain.CanCollide = false
				chain.Color = wrapColor
				chain.Material = Enum.Material.Neon
				chain.Name = "HonouredChain"

				local weld = Instance.new("WeldConstraint")
				weld.Part0 = limbPart
				weld.Part1 = chain
				weld.Parent = chain

				local angle = math.rad((360 / 10) * i)
				local offset = Vector3.new(math.cos(angle) * 0.5, math.sin(angle) * 0.5, 0)
				chain.CFrame = limbPart.CFrame * CFrame.new(offset) * CFrame.Angles(0, 0, angle)

				for _, face in pairs(Enum.NormalId:GetEnumItems()) do
					local decal = Instance.new("Decal")
					decal.Texture = decalId
					decal.Face = face
					decal.Parent = chain
				end

				chain.Parent = limbPart
			end

			for i = 1, 5 do
				local chain = Instance.new("Part")
				chain.Size = Vector3.new(0.2, 0.2, 3)
				chain.Anchored = false
				chain.CanCollide = false
				chain.Color = extendColor
				chain.Transparency = 0.4
				chain.Material = Enum.Material.SmoothPlastic
				chain.Name = "HonouredExtend"

				local attachment0 = Instance.new("Attachment", limbPart)
				local attachment1 = Instance.new("Attachment", chain)

				local align = Instance.new("AlignPosition")
				align.Attachment0 = attachment1
				align.Attachment1 = attachment0
				align.MaxForce = math.huge
				align.Responsiveness = 200
				align.RigidityEnabled = true
				align.Parent = chain

				chain.CFrame = limbPart.CFrame * CFrame.new(0, 0, -2 - (i * 1.5))

				for _, face in pairs(Enum.NormalId:GetEnumItems()) do
					local decal = Instance.new("Decal")
					decal.Texture = decalId
					decal.Face = face
					decal.Parent = chain
				end

				chain.Parent = limbPart
			end
		end
	end

	local glow = Instance.new("PointLight")
	glow.Name = "HonouredGlow"
	glow.Color = Color3.fromRGB(255, 180, 0)
	glow.Brightness = 2
	glow.Range = 10
	glow.Shadows = false
	glow.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso")

	local head = Character:FindFirstChild("Head")
	if head then
		local function createPulse()
			local pulse = Instance.new("Part")
			pulse.Size = Vector3.new(1, 1, 1)
			pulse.Shape = Enum.PartType.Ball
			pulse.Anchored = true
			pulse.CanCollide = false
			pulse.Material = Enum.Material.Neon
			pulse.Color = Color3.fromRGB(255, 200, 50)
			pulse.Transparency = 0.5
			pulse.Name = "PulseCircle"
			pulse.CFrame = head.CFrame
			pulse.Parent = head

			game:GetService("TweenService"):Create(pulse, TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
				Size = Vector3.new(5, 5, 5),
				Transparency = 1
			}):Play()

			game.Debris:AddItem(pulse, 1.6)
		end

		isPulsing = true
		pulseConnection = task.spawn(function()
			while isPulsing do
				createPulse()
				task.wait(math.random(15, 30) / 10)
			end
		end)
	end
end

local function deactivateDance()
	dance8On = false

	if WalkAnim then WalkAnim:Stop() WalkAnim = nil end
	if soundeffect then soundeffect:Destroy() soundeffect = nil end
	if songLabel then songLabel:Destroy() songLabel = nil end
	if pulseConnection then isPulsing = false pulseConnection = nil end

	local Character = game.Players.LocalPlayer.Character
	if Character then
		for _, limb in pairs(Character:GetChildren()) do
			for _, obj in pairs(limb:GetChildren()) do
				if obj.Name == "HonouredChain" or obj.Name == "HonouredExtend" then
					obj:Destroy()
				end
			end
		end
		for _, v in pairs(Character:GetDescendants()) do
			if v:IsA("PointLight") and v.Name == "HonouredGlow" then v:Destroy() end
			if v.Name == "PulseCircle" then v:Destroy() end
		end
	end
end
tool.Equipped:Connect(function()
	if not dance8On then
		activateDance()
	else
		deactivateDance()
	end
end)

tool.Unequipped:Connect(function()
	if dance8On then
		deactivateDance()
	end
end)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Slickback"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "NO BRO I'M A PIMP NAMED SLICKBACK"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("Slickback.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/LAKIM%20-%20A%20Pimp%20Named%20Slickback.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Slickback)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Slickback.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: A Pimp Named Slickback - LAKIM"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Smug Dance"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "a hat in a time idfk i forgot the game name"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("Smug.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/S%20M%20U%20G%20%20-%20D%20A%20N%20C%20I%20N%20%20-%20%F0%9D%93%94%20%F0%9D%93%A5%20%F0%9D%93%9E%20%F0%9D%93%9B%20%F0%9D%93%A5%20%F0%9D%93%94%20%F0%9D%93%93.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Smug)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Smug.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Dancin - Aaron Smith (KRONO REMIX)"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Muffin Time"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "it's muffin time!!1!1!!1!!"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("MuffinSong.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/THE%20MUFFIN%20SONG%20(asdfmovie%20feat.%20Schmoyoho).mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Muffin)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("MuffinSong.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0.45
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: The Muffin Song - The Gregory Brothers, TomSka"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Kazotsky Kick"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "tf2 dance russian lol ok wowzers"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("SoldierOfDance.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Team%20Fortress%202%20Soundtrack%20%20Soldier%20of%20Dance.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Kazotsky)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("SoldierOfDance.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0.6
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: TF2 Soundtrack | Soldier of Dance - Valve Studio Orchestra"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Caramelldansen"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "oooo sooo kawaii >w<"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("Caramella.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Caramella%20Girls%20-%20Caramelldansen%20HD%20Version%20(Swedish%20Original)%20Official.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Caramell)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Caramella.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0.5
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Caramelldansen - Caramella Girls"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Floss"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "flossy dossy your teeth buddy you tootsie roll"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("Inspector.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Todd%20Terje%20-%20Inspector%20Norse.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Flossy)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Inspector.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0.5
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Inspector Norse - Todd Terje"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Create the Tool instance
local tool = Instance.new("Tool")

tool.Name = "Soda Pop"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.ToolTip = "YOU THE ALL I CAN THINKING OF EVERY DROPPING I THE DRINKING OF"

-- Persistent animation, sound, and GUI
local WalkAnim = nil
local soundeffect = nil
local songLabel = nil

-- Equip function
local function activateTool()
writefile("SodaPop.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Soda%20Pop%20By%20Saja%20Boys%20(KPop%20Demon%20Hunters%20Soundtrack)%20(Colour%20Coded%20Lyrics)%20%5BHanRomEng%5D.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, SodaPOP)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("SodaPop.mp3")
    soundeffect.Volume = 2
	soundeffect.TimePosition = 62.4
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Soda Pop - Saja Boys"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
end

-- Unequip function
local function deactivateTool()
    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
end

tool.Equipped:Connect(activateTool)
tool.Unequipped:Connect(deactivateTool)

tool.Parent = game.Players.LocalPlayer.Backpack
end)

-- Create a ScrollingFrame for the Dances section
local dancesSection = Instance.new("ScrollingFrame", tabScript)
dancesSection.LayoutOrder = 2
dancesSection.Name = "DancesSection"
dancesSection.Size = UDim2.new(1, -20, 0, 180) -- Adjust height if needed
dancesSection.Position = UDim2.new(0, 10, 0, dancesSectionY or 220) -- Change this Y position if needed
dancesSection.CanvasSize = UDim2.new(0, 0, 0, 0)
dancesSection.ScrollBarThickness = 6
dancesSection.AutomaticCanvasSize = Enum.AutomaticSize.Y
dancesSection.AutomaticCanvasSize = Enum.AutomaticSize.Y
dancesSection.BackgroundTransparency = 1

-- Add layout
local layout = Instance.new("UIListLayout", dancesSection)
layout.Padding = UDim.new(0, 6)
layout.SortOrder = Enum.SortOrder.LayoutOrder

-- Dance 1 Toggle
local dance1Toggle = Instance.new("TextButton")
dance1Toggle.Size = UDim2.new(1, 0, 0, 30)
dance1Toggle.Text = "Dance 1 - Dia Delicia [OFF]"
dance1Toggle.Font = Enum.Font.RobotoMono
dance1Toggle.TextSize = 14
dance1Toggle.TextColor3 = Color3.new(1, 1, 1)
dance1Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance1Toggle).CornerRadius = UDim.new(0, 6)
dance1Toggle.Parent = dancesSection

local dance1On = false
dance1Toggle.MouseButton1Click:Connect(function()
	dance1On = not dance1On
	dance1Toggle.Text = "Dance 1 - Dia Delicia [" .. (dance1On and "ON" or "OFF") .. "]"
	
	if dance1On then
		writefile("DiaDelicia.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/DIA%20DEL%C3%8DCIA%20-%20Nakama.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Dia Delicia - Nakama, Mc Staff & ΣP"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("DiaDelicia.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 5.4
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

	task.wait(0.9)

	-- The DANCE!!!!
    WalkAnim = AnimHandler.new(Character, DiaDelicia)
    WalkAnim.Looped = true
    WalkAnim:Play()
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 2 Toggle
local dance2Toggle = Instance.new("TextButton")
dance2Toggle.Size = UDim2.new(1, 0, 0, 30)
dance2Toggle.Text = "Dance 2 - Assumptions [OFF]"
dance2Toggle.Font = Enum.Font.RobotoMono
dance2Toggle.TextSize = 14
dance2Toggle.TextColor3 = Color3.new(1, 1, 1)
dance2Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance2Toggle).CornerRadius = UDim.new(0, 6)
dance2Toggle.Parent = dancesSection

local dance2On = false
dance2Toggle.MouseButton1Click:Connect(function()
	dance2On = not dance2On
	dance2Toggle.Text = "Dance 2 - Assumptions [" .. (dance2On and "ON" or "OFF") .. "]"
	
	if dance2On then
		writefile("Assumptions.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Sam%20Gellaitry%20-%20Assumptions%20(Slowed).mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Assumptions)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Assumptions.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 58.5
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Assumptions - Sam Gellaitry"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
	    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 3 Toggle
local dance3Toggle = Instance.new("TextButton")
dance3Toggle.Size = UDim2.new(1, 0, 0, 30)
dance3Toggle.Text = "Dance 3 - Rat Dance [OFF]"
dance3Toggle.Font = Enum.Font.RobotoMono
dance3Toggle.TextSize = 14
dance3Toggle.TextColor3 = Color3.new(1, 1, 1)
dance3Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance3Toggle).CornerRadius = UDim.new(0, 6)
dance3Toggle.Parent = dancesSection

local dance3On = false
dance3Toggle.MouseButton1Click:Connect(function()
	dance3On = not dance3On
	dance3Toggle.Text = "Dance 3 - Rat Dance [" .. (dance3On and "ON" or "OFF") .. "]"
	
	if dance3On then
		writefile("Chess.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/joyful%20-%20chess%20(slowed).mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, ChessTypeBeat)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Chess.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 2.5
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Chess Type Beat - joyful"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 4 Toggle
local dance4Toggle = Instance.new("TextButton")
dance4Toggle.Size = UDim2.new(1, 0, 0, 30)
dance4Toggle.Text = "Dance 4 - Boogie Down [OFF]"
dance4Toggle.Font = Enum.Font.RobotoMono
dance4Toggle.TextSize = 14
dance4Toggle.TextColor3 = Color3.new(1, 1, 1)
dance4Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance4Toggle).CornerRadius = UDim.new(0, 6)
dance4Toggle.Parent = dancesSection

local dance4On = false
dance4Toggle.MouseButton1Click:Connect(function()
	dance4On = not dance4On
	dance4Toggle.Text = "Dance 4 - Boogie Down [" .. (dance4On and "ON" or "OFF") .. "]"
	
	if dance4On then
		writefile("FunkedUp.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/FUNKED%20UP%20(SLOWED).mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, BoogieDown)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("FunkedUp.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 8.8
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: FUNKED UP - xxanteria"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 5 Toggle
local dance5Toggle = Instance.new("TextButton")
dance5Toggle.Size = UDim2.new(1, 0, 0, 30)
dance5Toggle.Text = "Dance 5 - Chase Me [OFF]"
dance5Toggle.Font = Enum.Font.RobotoMono
dance5Toggle.TextSize = 14
dance5Toggle.TextColor3 = Color3.new(1, 1, 1)
dance5Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance5Toggle).CornerRadius = UDim.new(0, 6)
dance5Toggle.Parent = dancesSection

local dance5On = false
dance5Toggle.MouseButton1Click:Connect(function()
	dance5On = not dance5On
	dance5Toggle.Text = "Dance 5 - Chase Me [" .. (dance5On and "ON" or "OFF") .. "]"
	
	if dance5On then
		writefile("DevilIsALie.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Tommy%20Richman%20-%20DEVIL%20IS%20A%20LIE.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, ChaseME)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("DevilIsALie.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 45.2
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: DEVIL IS A LIE - Tommy Richman"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 6 Toggle
local dance6Toggle = Instance.new("TextButton")
dance6Toggle.Size = UDim2.new(1, 0, 0, 30)
dance6Toggle.Text = "Dance 6 - Locked [OFF]"
dance6Toggle.Font = Enum.Font.RobotoMono
dance6Toggle.TextSize = 14
dance6Toggle.TextColor3 = Color3.new(1, 1, 1)
dance6Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance6Toggle).CornerRadius = UDim.new(0, 6)
dance6Toggle.Parent = dancesSection

local dance6On = false
dance6Toggle.MouseButton1Click:Connect(function()
	dance6On = not dance6On
	dance6Toggle.Text = "Dance 6 - Locked [" .. (dance6On and "ON" or "OFF") .. "]"
	
	if dance6On then
		writefile("WallyWest.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/My%20Ordinary%20Life%20(Slowed).mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Locked)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("WallyWest.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 9.855
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: My Ordinary Life - The Living Tombstone"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 7 Toggle
local dance7Toggle = Instance.new("TextButton")
dance7Toggle.Size = UDim2.new(1, 0, 0, 30)
dance7Toggle.Text = "Dance 7 - Hakari Dance [OFF]"
dance7Toggle.Font = Enum.Font.RobotoMono
dance7Toggle.TextSize = 14
dance7Toggle.TextColor3 = Color3.new(1, 1, 1)
dance7Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance7Toggle).CornerRadius = UDim.new(0, 6)
dance7Toggle.Parent = dancesSection

-- 💜 EFFECT LABEL (inside top-left corner)
local effectTag7 = Instance.new("TextLabel")
effectTag7.Name = "EffectLabel"
effectTag7.Size = UDim2.new(0, 40, 0, 16)
effectTag7.Position = UDim2.new(0, 6, 0, 6) -- inside with padding
effectTag7.BackgroundColor3 = Color3.fromRGB(128, 0, 255) -- purple background
effectTag7.Text = "EFFECT"
effectTag7.TextColor3 = Color3.new(1, 1, 1) -- white text
effectTag7.Font = Enum.Font.RobotoMono
effectTag7.TextSize = 11
effectTag7.TextStrokeTransparency = 0.6
effectTag7.BackgroundTransparency = 0
effectTag7.ZIndex = 2
effectTag7.Parent = dance7Toggle

local tagCorner7 = Instance.new("UICorner")
tagCorner7.CornerRadius = UDim.new(0, 4)
tagCorner7.Parent = effectTag7

local dance7On = false
dance7Toggle.MouseButton1Click:Connect(function()
	dance7On = not dance7On
	dance7Toggle.Text = "Dance 7 - Hakari Dance [" .. (dance7On and "ON" or "OFF") .. "]"

	if dance7On then
		writefile("TucaDonka.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/TUCA%20DONKA%20%20HAKARI%20DANCE%204k%20%20LONG%20VERSION.mp3"))

		local Player = game.Players.LocalPlayer
		local Character = Player.Character or Player.CharacterAdded:Wait()
		local PlayerGui = Player:WaitForChild("PlayerGui")

		-- Animation
		WalkAnim = AnimHandler.new(Character, Hakari)
		WalkAnim.Looped = true
		WalkAnim:Play()

		-- Sound
		soundeffect = Instance.new("Sound")
		soundeffect.SoundId = getcustomasset("TucaDonka.mp3")
		soundeffect.Volume = 5
		soundeffect.TimePosition = 22.1
		soundeffect.Looped = true
		soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
		soundeffect:Play()

		-- Song label
		local screenGui = Instance.new("ScreenGui")
		screenGui.Name = "NowPlayingGui"
		screenGui.ResetOnSpawn = false
		screenGui.Parent = PlayerGui

		local label = Instance.new("TextLabel")
		label.Name = "NowPlayingLabel"
		label.Text = "Now playing: TUCA DONKA - Skorde, CURSEDEVIL, DJ FKU, MC ROBA CENA"
		label.Font = Enum.Font.SourceSansBold
		label.TextColor3 = Color3.new(1, 1, 1)
		label.TextStrokeColor3 = Color3.new(0, 0, 0)
		label.TextStrokeTransparency = 0
		label.TextScaled = false
		label.TextSize = 13
		label.BackgroundTransparency = 1
		label.Size = UDim2.new(0.3, 0, 0.05, 0)
		label.Position = UDim2.new(0.35, 0, 0.9, 0)
		label.Parent = screenGui

		songLabel = screenGui

		-- Aura effect (green flames)
		local function attachFlameAura(part)
			local success, model = pcall(function()
				return game:GetObjects("rbxassetid://5416752317")[1]
			end)
			if success and model then
				local flame = model:FindFirstChildWhichIsA("ParticleEmitter", true)
				if flame then
					local attachment = Instance.new("Attachment")
					attachment.Name = "FlameAttachment"
					attachment.Position = Vector3.new(0, -3.5, 0)
					attachment.Parent = part

					local clonedFlame = flame:Clone()
					clonedFlame.Name = "FlameAura"
					clonedFlame.Color = ColorSequence.new{
						ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 150)),
						ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 180, 100))
					}
					clonedFlame.Parent = attachment
				end
			end
		end

		for _, part in pairs(Character:GetChildren()) do
			if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
				attachFlameAura(part)
			end
		end

		-- Speedlines
		local success, speedlinesModel = pcall(function()
			return game:GetObjects("rbxassetid://88979068651735")[1]
		end)

		if success and speedlinesModel then
			speedlinesModel.Name = "HakariSpeedlines"
			local torso = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character:FindFirstChild("HumanoidRootPart")
			speedlinesModel:SetPrimaryPartCFrame(torso.CFrame * CFrame.new(0, -3.5, 0))
			speedlinesModel.Parent = Character

			local weld = Instance.new("WeldConstraint")
			weld.Part0 = speedlinesModel.PrimaryPart
			weld.Part1 = torso
			weld.Parent = speedlinesModel.PrimaryPart
		end

	else
		if WalkAnim then
			WalkAnim:Stop()
			WalkAnim = nil
		end
		if soundeffect then
			soundeffect.Looped = false
			soundeffect:Stop()
			soundeffect:Destroy()
			soundeffect = nil
		end
		if songLabel then
			songLabel:Destroy()
			songLabel = nil
		end

		local Character = game.Players.LocalPlayer.Character

		-- Clean up flame aura
		for _, part in pairs(Character:GetDescendants()) do
			if part:IsA("Attachment") and part:FindFirstChild("FlameAura") then
				part:Destroy()
			end
		end

		-- Clean up speedlines
		local speedlines = Character:FindFirstChild("HakariSpeedlines")
		if speedlines then
			speedlines:Destroy()
		end
	end
end)

-- Dance 8 Toggle (CHAIN ASCENSION - HOLY RADIANCE)
local dance8Toggle = Instance.new("TextButton")
dance8Toggle.Size = UDim2.new(1, 0, 0, 30)
dance8Toggle.Text = "Dance 8 - Honoured [OFF]"
dance8Toggle.Font = Enum.Font.RobotoMono
dance8Toggle.TextSize = 14
dance8Toggle.TextColor3 = Color3.new(1, 1, 1)
dance8Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance8Toggle).CornerRadius = UDim.new(0, 6)
dance8Toggle.Parent = dancesSection

-- 💜 EFFECT LABEL (inside top-left corner)
local effectTag = Instance.new("TextLabel")
effectTag.Name = "EffectLabel"
effectTag.Size = UDim2.new(0, 40, 0, 16)
effectTag.Position = UDim2.new(0, 6, 0, 6) -- inside top-left, with padding
effectTag.BackgroundColor3 = Color3.fromRGB(128, 0, 255) -- purple
effectTag.Text = "EFFECT"
effectTag.TextColor3 = Color3.new(1, 1, 1) -- white
effectTag.Font = Enum.Font.RobotoMono
effectTag.TextSize = 11
effectTag.TextStrokeTransparency = 0.6
effectTag.BackgroundTransparency = 0
effectTag.ZIndex = 2
effectTag.Parent = dance8Toggle

local tagCorner = Instance.new("UICorner")
tagCorner.CornerRadius = UDim.new(0, 4)
tagCorner.Parent = effectTag

local dance8On = false
local pulseConnection
local isPulsing = false

dance8Toggle.MouseButton1Click:Connect(function()
	dance8On = not dance8On
	dance8Toggle.Text = "Dance 8 - Honoured [" .. (dance8On and "ON" or "OFF") .. "]"

	if dance8On then
		writefile("HonouredOne.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Gojo%20Satoru%20-%20The%20Honored%20One%20%20Jujutsu%20Kaisen%20Season%202%20OST.mp3"))

		local Player = game.Players.LocalPlayer
		local Character = Player.Character or Player.CharacterAdded:Wait()
		local PlayerGui = Player:WaitForChild("PlayerGui")

		-- Animation
		WalkAnim = AnimHandler.new(Character, Gojo)
		WalkAnim.Looped = true
		WalkAnim:Play()

		-- Sound
		soundeffect = Instance.new("Sound")
		soundeffect.SoundId = getcustomasset("HonouredOne.mp3")
		soundeffect.Volume = 5
		soundeffect.TimePosition = 0
		soundeffect.Looped = true
		soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
		soundeffect:Play()

		-- Text label
		local screenGui = Instance.new("ScreenGui")
		screenGui.Name = "NowPlayingGui"
		screenGui.ResetOnSpawn = false
		screenGui.Parent = PlayerGui

		local label = Instance.new("TextLabel")
		label.Name = "NowPlayingLabel"
		label.Text = "Now playing: If I Am With You - Yoshimasa Terui"
		label.Font = Enum.Font.SourceSansBold
		label.TextColor3 = Color3.new(1, 1, 1)
		label.TextStrokeColor3 = Color3.new(0, 0, 0)
		label.TextStrokeTransparency = 0
		label.TextScaled = false
		label.TextSize = 13
		label.BackgroundTransparency = 1
		label.Size = UDim2.new(0.3, 0, 0.05, 0)
		label.Position = UDim2.new(0.35, 0, 0.9, 0)
		label.Parent = screenGui

		songLabel = screenGui

		-- CHAINS AROUND & EXTENDING FROM LIMBS
		local decalId = "rbxassetid://12694722995"
		local limbs = {
			"Left Arm",
			"Right Arm",
			"Left Leg",
			"Right Leg"
		}
		local chainWrapColor = Color3.fromRGB(255, 255, 0)
		local chainExtendColor = Color3.fromRGB(255, 255, 0)

		for _, limb in ipairs(limbs) do
			local limbPart = Character:FindFirstChild(limb) or Character:FindFirstChild(limb:gsub(" ", ""))
			if limbPart then
				for i = 1, 10 do
					local chain = Instance.new("Part")
					chain.Size = Vector3.new(0.2, 0.2, 1)
					chain.Anchored = false
					chain.CanCollide = false
					chain.Color = chainWrapColor
					chain.Material = Enum.Material.Neon
					chain.Name = "HonouredChain"

					local weld = Instance.new("WeldConstraint")
					weld.Part0 = limbPart
					weld.Part1 = chain
					weld.Parent = chain

					local angle = math.rad((360 / 10) * i)
					local offset = Vector3.new(math.cos(angle) * 0.5, math.sin(angle) * 0.5, 0)
					chain.CFrame = limbPart.CFrame * CFrame.new(offset) * CFrame.Angles(0, 0, angle)

					for _, face in pairs(Enum.NormalId:GetEnumItems()) do
						local decal = Instance.new("Decal")
						decal.Texture = decalId
						decal.Face = face
						decal.Parent = chain
					end

					chain.Parent = limbPart
				end

				for i = 1, 5 do
					local chain = Instance.new("Part")
					chain.Size = Vector3.new(0.2, 0.2, 3)
					chain.Anchored = false
					chain.CanCollide = false
					chain.Color = chainExtendColor
					chain.Transparency = 0.4
					chain.Material = Enum.Material.SmoothPlastic
					chain.Name = "HonouredExtend"

					local attachment0 = Instance.new("Attachment", limbPart)
					local attachment1 = Instance.new("Attachment", chain)

					local align = Instance.new("AlignPosition")
					align.Attachment0 = attachment1
					align.Attachment1 = attachment0
					align.MaxForce = math.huge
					align.Responsiveness = 200
					align.RigidityEnabled = true
					align.Parent = chain

					chain.CFrame = limbPart.CFrame * CFrame.new(0, 0, -2 - (i * 1.5))

					for _, face in pairs(Enum.NormalId:GetEnumItems()) do
						local decal = Instance.new("Decal")
						decal.Texture = decalId
						decal.Face = face
						decal.Parent = chain
					end

					chain.Parent = limbPart
				end
			end
		end

		-- TORSO GLOW
		local glow = Instance.new("PointLight")
		glow.Name = "HonouredGlow"
		glow.Color = Color3.fromRGB(255, 180, 0)
		glow.Brightness = 2
		glow.Range = 10
		glow.Shadows = false
		glow.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso")

		-- HEAD PULSE (non-repetitive)
		local head = Character:FindFirstChild("Head")
		if head then
			local function createPulse()
				local pulse = Instance.new("Part")
				pulse.Size = Vector3.new(1, 1, 1)
				pulse.Shape = Enum.PartType.Ball
				pulse.Anchored = true
				pulse.CanCollide = false
				pulse.Material = Enum.Material.Neon
				pulse.Color = Color3.fromRGB(255, 200, 50)
				pulse.Transparency = 0.5
				pulse.Name = "PulseCircle"
				pulse.CFrame = head.CFrame
				pulse.Parent = head

				game:GetService("TweenService"):Create(pulse, TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
					Size = Vector3.new(5, 5, 5),
					Transparency = 1
				}):Play()

				game.Debris:AddItem(pulse, 1.6)
			end

			isPulsing = true
			pulseConnection = task.spawn(function()
				while isPulsing do
					createPulse()
					task.wait(math.random(15, 30) / 10) -- 1.5 to 3 seconds
				end
			end)
		end
	else
		if WalkAnim then
			WalkAnim:Stop()
			WalkAnim = nil
		end
		if soundeffect then
			soundeffect.Looped = false
			soundeffect:Stop()
			soundeffect:Destroy()
			soundeffect = nil
		end
		if songLabel then
			songLabel:Destroy()
			songLabel = nil
		end
		if pulseConnection then
			isPulsing = false
			pulseConnection = nil
		end
		local Character = game.Players.LocalPlayer.Character
		if Character then
			for _, limb in pairs(Character:GetChildren()) do
				for _, obj in pairs(limb:GetChildren()) do
					if obj.Name == "HonouredChain" or obj.Name == "HonouredExtend" then
						obj:Destroy()
					end
				end
			end
			for _, v in pairs(Character:GetDescendants()) do
				if v:IsA("PointLight") and v.Name == "HonouredGlow" then
					v:Destroy()
				end
				if v.Name == "PulseCircle" then
					v:Destroy()
				end
			end
		end
	end
end)

-- Dance 9 Toggle
local dance9Toggle = Instance.new("TextButton")
dance9Toggle.Size = UDim2.new(1, 0, 0, 30)
dance9Toggle.Text = "Dance 9 - Slickback [OFF]"
dance9Toggle.Font = Enum.Font.RobotoMono
dance9Toggle.TextSize = 14
dance9Toggle.TextColor3 = Color3.new(1, 1, 1)
dance9Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance9Toggle).CornerRadius = UDim.new(0, 6)
dance9Toggle.Parent = dancesSection

local dance9On = false
dance9Toggle.MouseButton1Click:Connect(function()
	dance9On = not dance9On
	dance9Toggle.Text = "Dance 9 - Slickback [" .. (dance9On and "ON" or "OFF") .. "]"
	
	if dance9On then
		writefile("Slickback.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/LAKIM%20-%20A%20Pimp%20Named%20Slickback.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Slickback)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Slickback.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: If I Am With You - Yoshimasa Terui"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 10 Toggle
local dance10Toggle = Instance.new("TextButton")
dance10Toggle.Size = UDim2.new(1, 0, 0, 30)
dance10Toggle.Text = "Dance 10 - Smug Dance [OFF]"
dance10Toggle.Font = Enum.Font.RobotoMono
dance10Toggle.TextSize = 14
dance10Toggle.TextColor3 = Color3.new(1, 1, 1)
dance10Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance10Toggle).CornerRadius = UDim.new(0, 6)
dance10Toggle.Parent = dancesSection

local dance10On = false
dance10Toggle.MouseButton1Click:Connect(function()
	dance10On = not dance10On
	dance10Toggle.Text = "Dance 10 - Smug Dance [" .. (dance10On and "ON" or "OFF") .. "]"
	
	if dance10On then
		writefile("Smug.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/S%20M%20U%20G%20%20-%20D%20A%20N%20C%20I%20N%20%20-%20%F0%9D%93%94%20%F0%9D%93%A5%20%F0%9D%93%9E%20%F0%9D%93%9B%20%F0%9D%93%A5%20%F0%9D%93%94%20%F0%9D%93%93.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Smug)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Smug.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Dancin - Aaron Smith (KRONO REMIX)"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 11 Toggle
local dance11Toggle = Instance.new("TextButton")
dance11Toggle.Size = UDim2.new(1, 0, 0, 30)
dance11Toggle.Text = "Dance 11 - Muffin Time Dance [OFF]"
dance11Toggle.Font = Enum.Font.RobotoMono
dance11Toggle.TextSize = 14
dance11Toggle.TextColor3 = Color3.new(1, 1, 1)
dance11Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance11Toggle).CornerRadius = UDim.new(0, 6)
dance11Toggle.Parent = dancesSection

local dance11On = false
dance11Toggle.MouseButton1Click:Connect(function()
	dance11On = not dance11On
	dance11Toggle.Text = "Dance 11 - Muffin Time [" .. (dance11On and "ON" or "OFF") .. "]"
	
	if dance11On then
		writefile("MuffinSong.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/THE%20MUFFIN%20SONG%20(asdfmovie%20feat.%20Schmoyoho).mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Muffin)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("MuffinSong.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0.45
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: The Muffin Song - The Gregory Brothers, TomSka"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 12 Toggle
local dance12Toggle = Instance.new("TextButton")
dance12Toggle.Size = UDim2.new(1, 0, 0, 30)
dance12Toggle.Text = "Dance 12 - Kazotsky Kick [OFF]"
dance12Toggle.Font = Enum.Font.RobotoMono
dance12Toggle.TextSize = 14
dance12Toggle.TextColor3 = Color3.new(1, 1, 1)
dance12Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance12Toggle).CornerRadius = UDim.new(0, 6)
dance12Toggle.Parent = dancesSection

local dance12On = false
dance12Toggle.MouseButton1Click:Connect(function()
	dance12On = not dance12On
	dance12Toggle.Text = "Dance 12 - Kazotsky Kick [" .. (dance12On and "ON" or "OFF") .. "]"
	
	if dance12On then
		writefile("SoldierOfDance.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Team%20Fortress%202%20Soundtrack%20%20Soldier%20of%20Dance.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Kazotsky)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("SoldierOfDance.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0.6
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: TF2 Soundtrack | Soldier of Dance - Valve Studio Orchestra"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 13 Toggle
local dance13Toggle = Instance.new("TextButton")
dance13Toggle.Size = UDim2.new(1, 0, 0, 30)
dance13Toggle.Text = "Dance 13 - Caramelldansen [OFF]"
dance13Toggle.Font = Enum.Font.RobotoMono
dance13Toggle.TextSize = 14
dance13Toggle.TextColor3 = Color3.new(1, 1, 1)
dance13Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance13Toggle).CornerRadius = UDim.new(0, 6)
dance13Toggle.Parent = dancesSection

local dance13On = false
dance13Toggle.MouseButton1Click:Connect(function()
	dance13On = not dance13On
	dance13Toggle.Text = "Dance 13 - Caramelldansen [" .. (dance13On and "ON" or "OFF") .. "]"
	
	if dance13On then
		writefile("Caramella.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Caramella%20Girls%20-%20Caramelldansen%20HD%20Version%20(Swedish%20Original)%20Official.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Caramell)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Caramella.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0.5
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Caramelldansen - Caramella Girls"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 14 Toggle
local dance14Toggle = Instance.new("TextButton")
dance14Toggle.Size = UDim2.new(1, 0, 0, 30)
dance14Toggle.Text = "Dance 14 - Floss [OFF]"
dance14Toggle.Font = Enum.Font.RobotoMono
dance14Toggle.TextSize = 14
dance14Toggle.TextColor3 = Color3.new(1, 1, 1)
dance14Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance14Toggle).CornerRadius = UDim.new(0, 6)
dance14Toggle.Parent = dancesSection

local dance14On = false
dance14Toggle.MouseButton1Click:Connect(function()
	dance14On = not dance14On
	dance14Toggle.Text = "Dance 14 - Floss [" .. (dance14On and "ON" or "OFF") .. "]"
	
	if dance14On then
		writefile("Inspector.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Todd%20Terje%20-%20Inspector%20Norse.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, Flossy)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("Inspector.mp3")
    soundeffect.Volume = 5
	soundeffect.TimePosition = 0.5
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Inspector Norse - Todd Terje"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- Dance 15 Toggle
local dance15Toggle = Instance.new("TextButton")
dance15Toggle.Size = UDim2.new(1, 0, 0, 30)
dance15Toggle.Text = "Dance 15 - Soda Pop [OFF]"
dance15Toggle.Font = Enum.Font.RobotoMono
dance15Toggle.TextSize = 14
dance15Toggle.TextColor3 = Color3.new(1, 1, 1)
dance15Toggle.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dance15Toggle).CornerRadius = UDim.new(0, 6)
dance15Toggle.Parent = dancesSection

local dance15On = false
dance15Toggle.MouseButton1Click:Connect(function()
	dance15On = not dance15On
	dance15Toggle.Text = "Dance 15 - Soda Pop [" .. (dance15On and "ON" or "OFF") .. "]"
	
	if dance15On then
		writefile("SodaPop.mp3", game:HttpGet("https://github.com/NetlessMade/dia-delicia/raw/refs/heads/main/Soda%20Pop%20By%20Saja%20Boys%20(KPop%20Demon%20Hunters%20Soundtrack)%20(Colour%20Coded%20Lyrics)%20%5BHanRomEng%5D.mp3"))

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local PlayerGui = Player:WaitForChild("PlayerGui")

	-- Animation
	WalkAnim = AnimHandler.new(Character, SodaPOP)
    WalkAnim.Looped = true
    WalkAnim:Play()

	-- Sound
    soundeffect = Instance.new("Sound")
    soundeffect.SoundId = getcustomasset("SodaPop.mp3")
    soundeffect.Volume = 2
	soundeffect.TimePosition = 62.4
    soundeffect.Looped = true
    soundeffect.Parent = Character:FindFirstChild("Torso") or Character:FindFirstChild("UpperTorso") or Character
    soundeffect:Play()

    -- Text label
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NowPlayingGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local label = Instance.new("TextLabel")
    label.Name = "NowPlayingLabel"
    label.Text = "Now playing: Soda Pop - Saja Boys"
    label.Font = Enum.Font.SourceSansBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0
    label.TextScaled = false
    label.TextSize = 13 -- or go lower for quieter whispers (like 14)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.9, 0) -- BOTTOM center (above tools)
    label.Parent = screenGui

    songLabel = screenGui
	else
		    if WalkAnim then
        WalkAnim:Stop()
        WalkAnim = nil
    end
    if soundeffect then
        soundeffect.Looped = false
        soundeffect:Stop()
        soundeffect:Destroy()
        soundeffect = nil
    end
    if songLabel then
        songLabel:Destroy()
        songLabel = nil
    end
	end
end)

-- === MISC TAB ===
local themeSection = createSection(tabMisc, "Change Theme")
local themeBtn = Instance.new("TextButton", themeSection)
themeBtn.Size = UDim2.new(1, 0, 0, 30)
themeBtn.Text = "Cycle Theme"
themeBtn.Font = Enum.Font.RobotoMono
themeBtn.TextSize = 14
themeBtn.TextColor3 = Color3.new(1, 1, 1)
themeBtn.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", themeBtn).CornerRadius = UDim.new(0, 6)

themeBtn.MouseButton1Click:Connect(function()
	local keys = {}
	for k in pairs(Themes) do table.insert(keys, k) end
	local nextIndex = table.find(keys, currentTheme) % #keys + 1
	currentTheme = keys[nextIndex]
	local t = Themes[currentTheme]

	Main.BackgroundColor3 = t.BG
	Title.BackgroundColor3 = t.Title
	Tabs.BackgroundColor3 = t.Tabs
	Content.BackgroundColor3 = t.Content
	for _, btn in ipairs(Tabs:GetChildren()) do if btn:IsA("TextButton") then btn.BackgroundColor3 = t.Button end end
	for _, tab in ipairs(Content:GetChildren()) do
		for _, el in ipairs(tab:GetDescendants()) do
			if el:IsA("TextButton") then el.BackgroundColor3 = t.Button end
		end
	end
end)

local toggleSection = createSection(tabMisc, "Close Menu")
local keybindBtn = Instance.new("TextButton", toggleSection)
keybindBtn.Size = UDim2.new(1, 0, 0, 30)
keybindBtn.Text = "Set Keybind [Current: LeftAlt]"
keybindBtn.Font = Enum.Font.RobotoMono
keybindBtn.TextSize = 14
keybindBtn.TextColor3 = Color3.new(1, 1, 1)
keybindBtn.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", keybindBtn).CornerRadius = UDim.new(0, 6)

keybindBtn.MouseButton1Click:Connect(function()
	keybindBtn.Text = "Press a key..."
	local conn
	conn = UIS.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Keyboard then
			toggleKey = input.KeyCode
			keybindBtn.Text = "Set Keybind [Current: " .. toggleKey.Name .. "]"
			conn:Disconnect()
		end
	end)
end)

-- Toggle Menu Keybind
UIS.InputBegan:Connect(function(input)
	if input.KeyCode == toggleKey and GUI.Parent ~= nil then
		Main.Visible = not Main.Visible
	end
end)

-- === CREDITS TAB ===
local creditsLabel = Instance.new("TextLabel", tabCredits)
creditsLabel.Size = UDim2.new(1, -10, 0, 60)
creditsLabel.Position = UDim2.new(0, 5, 0, 0)
creditsLabel.Text = "\nCreator: NetlessMade\nScripter: NetlessMade"
creditsLabel.Font = Enum.Font.Roboto
creditsLabel.TextSize = 40
creditsLabel.TextColor3 = Color3.new(1, 1, 1)
creditsLabel.BackgroundTransparency = 1
creditsLabel.TextYAlignment = Enum.TextYAlignment.Top
creditsLabel.LayoutOrder = 1

-- ADD A LAYOUT MANAGER TO ENFORCE ORDER
local layout = Instance.new("UIListLayout", tabCredits)
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Padding = UDim.new(0, 10)

-- YOUTUBE BUTTON UNDER THE LABEL
local ytBtn = Instance.new("TextButton", tabCredits)
ytBtn.Size = UDim2.new(1, -10, 0, 30)
ytBtn.Position = UDim2.new(0, 5, 0, 0) -- this doesn't matter anymore due to layout
ytBtn.Text = "Subscribe to my YouTube Channel!"
ytBtn.Font = Enum.Font.RobotoMono
ytBtn.TextSize = 14
ytBtn.TextColor3 = Color3.new(1, 1, 1)
ytBtn.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", ytBtn).CornerRadius = UDim.new(0, 6)
ytBtn.LayoutOrder = 2

ytBtn.MouseButton1Click:Connect(function()
	setclipboard("https://www.youtube.com/@NetlessMade")
	game.StarterGui:SetCore("SendNotification", {
		Title = "Success!",
		Text = "Copied YT channel link to clipboard!",
		Duration = 3
	})
end)

-- DISCORD BUTTON UNDER THE LABEL
local dcBtn = Instance.new("TextButton", tabCredits)
dcBtn.Size = UDim2.new(1, -10, 0, 30)
dcBtn.Position = UDim2.new(0, 5, 0, 0) -- this doesn't matter anymore due to layout
dcBtn.Text = "Join my Discord!"
dcBtn.Font = Enum.Font.RobotoMono
dcBtn.TextSize = 14
dcBtn.TextColor3 = Color3.new(1, 1, 1)
dcBtn.BackgroundColor3 = Themes[currentTheme].Button
Instance.new("UICorner", dcBtn).CornerRadius = UDim.new(0, 6)
dcBtn.LayoutOrder = 2

dcBtn.MouseButton1Click:Connect(function()
    setclipboard("https://discord.gg/r7FCc3UTQn")
    game.StarterGui:SetCore("SendNotification", {
	    Title = "Success!",
	    Text = "Copied DC server invite to clipboard!",
	    Duration = 3
    })
end)
	else
		result.Text = "Invalid key!"
		result.TextColor3 = Color3.fromRGB(255, 50, 50)
	end
end)'))()
